"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _LoaderStyled = require("./Loader-styled");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var Loader = function Loader(_ref) {
  var text = _ref.text,
      sizeRatio = _ref.sizeRatio,
      color = _ref.color,
      other = _objectWithoutProperties(_ref, ["text", "sizeRatio", "color"]);

  var sizePx = sizeRatio * 17;

  var getLoaderText = function getLoaderText(text) {
    if (text) {
      return _react.default.createElement(_LoaderStyled.StyledLoaderText, {
        sizeRatio: sizePx
      }, text);
    }
  };

  return _react.default.createElement(_LoaderStyled.StyledLoader, _extends({
    sizeRatio: sizePx
  }, other), _react.default.createElement(_LoaderStyled.StyledLoaderBars, {
    sizeRatio: sizePx,
    color: color
  }), getLoaderText(text));
};

Loader.propTypes = {
  /** Text displayed below the loading bars. */
  text: _propTypes.default.string,

  /** Relative size of the Loader component. Value must be greater than 0. A value of 1 results in a 50px height Loader */
  sizeRatio: _propTypes.default.number,

  /** Color of the Loader bars */
  color: _propTypes.default.string
};
Loader.defaultProps = {
  sizeRatio: 1
};
Loader.displayName = 'Loader';
var _default = Loader;
exports.default = _default;